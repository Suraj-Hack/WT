Q1)
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Fibonacci Numbers</title>
    <script>
        // Function to calculate Fibonacci numbers
        function fibonacci() {
            var num1 = 0;
            var num2 = 1;
            var result = num1 + " " + num2; // Start with 0 and 1

            // Calculate and append Fibonacci numbers up to 10
            for (var i = 2; i < 10; i++) {
                var nextNum = num1 + num2;
                result += " " + nextNum;
                num1 = num2;
                num2 = nextNum;
            }

            // Display the Fibonacci numbers
            alert("Fibonacci Numbers:\n" + result);
        }
    </script>
</head>
<body>
    <h2>Fibonacci Numbers</h2>
    <button onclick="fibonacci()">Generate Fibonacci Numbers</button>
</body>
</html>

Q2)
pip install nltk matplotlib wordcloud

import re
import matplotlib.pyplot as plt
from wordcloud import WordCloud
from nltk.tokenize import word_tokenize, sent_tokenize
from nltk.corpus import stopwords
from collections import Counter

# Sample text paragraph
text = """
Consider any text paragraph. Remove the stopwords. Tokenize the paragraph to extract words and sentences. 
Calculate the word frequency distribution and plot the frequencies. Plot the wordcloud of the text.
"""

# Remove special characters and digits, and convert to lowercase
clean_text = re.sub(r'[^a-zA-Z\s]', '', text).lower()

# Tokenize the text into words
words = word_tokenize(clean_text)

# Remove stopwords
stop_words = set(stopwords.words('english'))
filtered_words = [word for word in words if word not in stop_words]

# Tokenize the text into sentences
sentences = sent_tokenize(text)

# Calculate word frequency distribution
word_freq = Counter(filtered_words)

# Plot word frequency distribution
plt.figure(figsize=(10, 6))
plt.bar(word_freq.keys(), word_freq.values())
plt.title('Word Frequency Distribution')
plt.xlabel('Words')
plt.ylabel('Frequency')
plt.xticks(rotation=45)
plt.show()

# Generate word cloud
wordcloud = WordCloud(width=800, height=400, background_color='white').generate(' '.join(filtered_words))

# Plot word cloud
plt.figure(figsize=(10, 6))
plt.imshow(wordcloud, interpolation='bilinear')
plt.title('Word Cloud')
plt.axis('off')
plt.show()
